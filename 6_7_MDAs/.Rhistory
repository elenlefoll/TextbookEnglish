??MAD
library(here)
source("~/.active-rstudio-document", echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache = TRUE)
#library(car) # For data wrangling
library(caret) # For its confusion matrix function
#library(clipr) # For easy exports
library(cowplot)
library(DescTools) # For 95% CI
library(dplyr)
library(emmeans)
#library(FactoMineR) # For Shiny app
library(factoextra) # For circular graphs of variables
library(forcats) # For data manipulation
library(here) # For dynamic file paths
library(ggplot2)
library(ggthemes) # For theme of factoextra plots
library(lme4) # For linear regression modelling
library(patchwork) # To create figures with more than one plot
library(pca3d) # For 3-D plots
library(PCAtools) # For nice biplots of PCA results
#library(purrr) # For data wrangling
library(psych) # For various useful stats function
library(sjPlot) # For model plots and tables
library(suffrager) # For pretty feminist colour palettes :)
library(tidyr)
library(tibble)
library(visreg) # For plots of interaction effects
source(here("R_rainclouds.R")) # For geom_flat_violin rainplots
renv::snapshot()
renv::snapshot()
renv::restore() # Restore the project's dependencies from the lockfile to ensure that same package versions are used as in the original thesis.
options(scipen=999)
library(broom.mixed) # For checking singularity issues
library(car) # For recoding data
library(cowplot) # For nice plots
library(emmeans) # Comparing group means of predicted values
library(GGally) # For ggpairs
library(gridExtra) # For making large faceted plots
library(here) # For ease of sharing
library(lme4) # For mixed effects modelling
library(scales) # For working with colours
library(sjPlot) # For nice tabular display of regression models
library(suffrager) # For some nice, feminist colours
library(tidyverse) # For data wrangling and plotting
library(visreg) # For nice visualisations of model results
select <- dplyr::select
source(here("R_rainclouds.R")) # For geom_flat_violin rainplots
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache = TRUE)
knitr::opts_chunk$set(echo = TRUE, tidy = TRUE, message=FALSE, paged.print=TRUE, fig.width = 10, warning=FALSE)
#renv::restore() # Restore the project's dependencies from the lockfile to ensure that same package versions are used as in the original thesis.
library(caret) # For its confusion matrix function
library(dplyr)
library(forcats)
library(here) # For dynamic file paths
library(ggplot2)
library(PerformanceAnalytics)
library(purrr) # For data wrangling
library(psych) # For various useful stats function
library(suffrager) # For pretty feminist colour palettes :)
library(tidyr)
library(tibble)
knitr::opts_chunk$set(echo = TRUE, paged.print=TRUE, fig.width = 10, warning=FALSE)
#renv::restore() # Restore the project's dependencies from the lockfile to ensure that same package versions are used as in the original thesis.
library(car) # For data wrangling
library(caret) # For its confusion matrix function
#library(clipr) # For quick exports to other programme
library(cowplot)
library(DescTools) # For 95% CI
library(dplyr)
library(emmeans)
#library(FactoMineR) # For Shiny app
library(factoextra) # For circular graphs of variables
library(forcats) # For the fct_relevel function
library(here) # For dynamic file paths
library(ggplot2)
library(ggthemes) # For theme of factoextra plots
library(lme4) # For linear regression modelling
library(patchwork) # To create figures with more than one plot
#library(pca3d) # For 3-D plots (not rendered in html knit)
library(PCAtools) # For nice biplots of PCA results
library(purrr) # For data wrangling
library(psych) # For various useful stats function
library(sjPlot) # For model plots and tables
library(suffrager) # For pretty feminist colour palettes :)
library(visreg) # For plots of interaction effects
source(here("R_rainclouds.R")) # For geom_flat_violin rainplots
knitr::opts_chunk$set(echo = TRUE, tidy = TRUE, message=FALSE, paged.print=TRUE, fig.width = 10, warning=FALSE)
#renv::restore() # Restore the project's dependencies from the lockfile to ensure that same package versions are used as in the original thesis.
library(caret) # For computing confusion matrices
library(harrypotter) # Only for colour scheme
library(here) # For path management
library(paletteer) # For nice colours
library(readxl) # For the direct import of Excel files
library(tidyverse) # For everything else!
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache = TRUE)
#renv::restore() # Restore the project's dependencies from the lockfile to ensure that same package versions are used as in the original thesis.
library(caret) # For its confusion matrix function
library(dplyr)
library(here) # For dynamic file paths
library(ggplot2)
library(PerformanceAnalytics)
library(purrr) # For data wrangling
library(psych) # For various useful stats function
library(suffrager) # For pretty feminist colour palettes :)
library(tidyr)
library(tibble)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache = TRUE)
#renv::restore() # Restore the project's dependencies from the lockfile to ensure that same package versions are used as in the original thesis.
#library(car) # For data wrangling
library(caret) # For its confusion matrix function
#library(clipr) # For easy exports
library(cowplot)
library(DescTools) # For 95% CI
library(dplyr)
library(emmeans)
#library(FactoMineR) # For Shiny app
library(factoextra) # For circular graphs of variables
library(forcats) # For data manipulation
library(here) # For dynamic file paths
library(ggplot2)
library(ggthemes) # For theme of factoextra plots
library(lme4) # For linear regression modelling
library(patchwork) # To create figures with more than one plot
library(pca3d) # For 3-D plots
library(PCAtools) # For nice biplots of PCA results
#library(purrr) # For data wrangling
library(psych) # For various useful stats function
library(sjPlot) # For model plots and tables
library(suffrager) # For pretty feminist colour palettes :)
library(tidyr)
library(tibble)
library(visreg) # For plots of interaction effects
source(here("R_rainclouds.R")) # For geom_flat_violin rainplots
renv::snapshot()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache = TRUE)
#renv::restore() # Restore the project's dependencies from the lockfile to ensure that same package versions are used as in the original thesis.
#library(car) # For data wrangling
library(caret) # For its confusion matrix function
#library(clipr) # For easy exports
library(cowplot)
library(DescTools) # For 95% CI
library(dplyr)
library(emmeans)
#library(FactoMineR) # For Shiny app
library(factoextra) # For circular graphs of variables
library(forcats) # For data manipulation
library(here) # For dynamic file paths
library(ggplot2)
library(ggthemes) # For theme of factoextra plots
library(lme4) # For linear regression modelling
library(patchwork) # To create figures with more than one plot
library(pca3d) # For 3-D plots
library(PCAtools) # For nice biplots of PCA results
#library(purrr) # For data wrangling
library(psych) # For various useful stats function
library(sjPlot) # For model plots and tables
library(suffrager) # For pretty feminist colour palettes :)
library(tidyr)
library(tibble)
library(visreg) # For plots of interaction effects
source(here("R_rainclouds.R")) # For geom_flat_violin rainplots
colours <- suf_palette(name = "london", n = 6, type = "continuous")
colours2 <- suf_palette(name = "classic", n = 5, type = "continuous")
colours <- c(colours, colours2[c(2:4)]) # Nine colours range
palette <- colours[c(1,5,6,2,3,8,7,4,9)] # Good order for PCA
scales::show_col(palette)
TxBcounts <- readRDS(here("FullMDA", "TxBcounts3.rds"))
colnames(TxBcounts)
nrow(TxBcounts)
TxBzlogcounts <- readRDS(here("FullMDA", "TxBzlogcounts.rds"))
nrow(TxBzlogcounts)
colnames(TxBzlogcounts)
TxBdata <- cbind(TxBcounts[,1:6], as.data.frame(TxBzlogcounts))
str(TxBdata)
ncol(TxBdata)-6
#saveRDS(TxBdata, here("FullMDA", "TxBdata.rds")) # Last saved 6 December 2021
colnames(TxBdata)
ncol(TxBdata) - 6
kmo <- KMO(TxBdata[,7:ncol(TxBdata)])
kmo # 0.86 (if conducted on counts all normalised per 100 words, this value drops to 0.61!)
kmo$MSAi[order(kmo$MSAi)]
# Remove first feature with MSAs of < 0.5
TxBdata <- TxBdata %>%
select(-c(MDWO))
kmo <- KMO(TxBdata[,7:ncol(TxBdata)])
kmo # 0.87
kmo$MSAi[order(kmo$MSAi)] # All individual MSA > 0.5
#TxBdata <- readRDS(here("FullMDA", "TxBdata.rds")) %>% select(-MDWO)
#colnames(TxBdata)
# Plot screen plot
#png(here("plots", "screeplot-TEC-only.png"), width = 20, height= 12, units = "cm", res = 300)
scree(TxBdata[,7:ncol(TxBdata)], factors = FALSE, pc = TRUE) # Retain six components
dev.off()
# Perform PCA
pca1 <- psych::principal(TxBdata[,7:ncol(TxBdata)],
nfactors = 6)
pca1$loadings
pca1$communality %>% sort(.) # If features with communalities of < 0.2 are removed, we remove STPR, HDG, MDNE and CAUSE
TxBdataforPCA <- TxBdata %>%
select(-c(STPR, MDNE, HDG, CAUSE))
kmo <- KMO(TxBdataforPCA[,7:ncol(TxBdataforPCA)])
kmo # 0.88
kmo$MSAi[order(kmo$MSAi)] # All individual MSA > 0.5
# Final number of features
ncol(TxBdataforPCA)-6
#saveRDS(TxBdataforPCA, here("FullMDA", "TxBdataforPCA.rds")) # Last saved on 3 December 2021
# Comparing a rotated vs. a non-rotated solution
TxBdata <- readRDS(here("FullMDA", "TxBdataforPCA.rds"))
colnames(TxBdata)
ncol(TxBdata)-6
# No rotation
pca2 <- psych::principal(TxBdata[,7:ncol(TxBdata)],
nfactors = 6,
rotate = "none")
pca2$loadings
biplot.psych(pca2,
vars = TRUE,
choose=c(1,2),
)
# Promax rotation
pca2.rotated <- psych::principal(TxBdata[,7:ncol(TxBdata)],
nfactors = 6,
rotate = "promax")
# This summary shows the component correlations which is particularly interesting
pca2.rotated
pca2.rotated$loadings
biplot.psych(pca2.rotated, vars = TRUE, choose=c(1,2))
# Perform PCA on full data
TxBdata <- readRDS(here("FullMDA", "TxBdataforPCA.rds"))
nrow(TxBdata)
ncol(TxBdata)-6
pca <- prcomp(TxBdata[,7:ncol(TxBdata)], scale.=FALSE) # All quantitative variables for all TxB files except outliers
register  <- factor(TxBdata[,"Register"]) # Register
level <- factor(TxBdata[,"Level"]) # Textbook proficiency level
summary(register)
summary(level)
summary(pca)
scree(TxBdata[,7:ncol(TxBdata)], factors = FALSE, pc = TRUE) # The scree plots pretty much always suggest that six components should be retained
## 3-D PCA plots https://cran.r-project.org/web/packages/pca3d/vignettes/pca3d.pdf ##
# 3-D plot
colours <- palette[c(1:3,8,7)] # without poetry
names(colours) <- c("Conversation", "Fiction", "Informative", "Instructional", "Personal")
scales::show_col(colours) # Check colours
pca3d(pca,
group = register,
components = 1:3,
#components = 4:6,
show.ellipses=FALSE,
ellipse.ci=0.75,
show.plane=FALSE,
col = col,
shape = "sphere",
radius = 1,
legend = "right")
## 3-D PCA plots https://cran.r-project.org/web/packages/pca3d/vignettes/pca3d.pdf ##
# 3-D plot
col <- palette[c(1:3,8,7)] # without poetry
names(colours) <- c("Conversation", "Fiction", "Informative", "Instructional", "Personal")
scales::show_col(colours) # Check colours
pca3d(pca,
group = register,
components = 1:3,
#components = 4:6,
show.ellipses=FALSE,
ellipse.ci=0.75,
show.plane=FALSE,
col = col,
shape = "sphere",
radius = 1,
legend = "right")
## 3-D PCA plots https://cran.r-project.org/web/packages/pca3d/vignettes/pca3d.pdf ##
# 3-D plot
col <- palette[c(1:3,8,7)] # without poetry
names(col) <- c("Conversation", "Fiction", "Informative", "Instructional", "Personal")
scales::show_col(col) # Check colours
pca3d(pca,
group = register,
components = 1:3,
#components = 4:6,
show.ellipses=FALSE,
ellipse.ci=0.75,
show.plane=FALSE,
col = col,
shape = "sphere",
radius = 1,
legend = "right")
names(col) <- c("C", "B", "E", "A", "D") # To colour the dots according to the profiency level of the textbooks
pca3d(pca,
components = 4:6,
group = level,
show.ellipses=FALSE,
ellipse.ci=0.75,
show.plane=FALSE,
col = col,
shape = "sphere",
radius = 0.8,
legend = "right")
snapshotPCA3d(here("plots", "PCA_TxB_3Dsnapshot.png"))
pca3d(pca,
group = register,
components = 1:3,
#components = 4:6,
show.ellipses=FALSE,
ellipse.ci=0.75,
show.plane=FALSE,
col = col,
shape = "sphere",
radius = 1,
legend = "right")
## 3-D PCA plots https://cran.r-project.org/web/packages/pca3d/vignettes/pca3d.pdf ##
# 3-D plot
col <- palette[c(1:3,8,7)] # without poetry
names(col) <- c("Conversation", "Fiction", "Informative", "Instructional", "Personal")
scales::show_col(col) # Check colours
pca3d(pca,
group = register,
components = 1:3,
#components = 4:6,
show.ellipses=FALSE,
ellipse.ci=0.75,
show.plane=FALSE,
col = col,
shape = "sphere",
radius = 1,
legend = "right")
snapshotPCA3d(here("plots", "PCA_TxB_3Dsnapshot.png"))
knitr::opts_chunk$set(echo = TRUE, paged.print=TRUE, fig.width = 10, warning=FALSE)
#renv::restore() # Restore the project's dependencies from the lockfile to ensure that same package versions are used as in the original thesis.
library(car) # For data wrangling
library(caret) # For its confusion matrix function
#library(clipr) # For quick exports to other programme
library(cowplot)
library(DescTools) # For 95% CI
library(dplyr)
library(emmeans)
#library(FactoMineR) # For Shiny app
library(factoextra) # For circular graphs of variables
library(forcats) # For the fct_relevel function
library(here) # For dynamic file paths
library(ggplot2)
library(ggthemes) # For theme of factoextra plots
library(lme4) # For linear regression modelling
library(patchwork) # To create figures with more than one plot
#library(pca3d) # For 3-D plots (not rendered in html knit)
library(PCAtools) # For nice biplots of PCA results
library(purrr) # For data wrangling
library(psych) # For various useful stats function
library(sjPlot) # For model plots and tables
library(suffrager) # For pretty feminist colour palettes :)
library(visreg) # For plots of interaction effects
source(here("R_rainclouds.R")) # For geom_flat_violin rainplots
data <- readRDS(here("FullMDA", "dataforPCA.rds"))
data %>%
filter(Series=="NGL") %>%
group_by(Series, Level) %>%
summarise(wordcount = sum(Words))
colnames(data)
pca <- prcomp(data[,9:ncol(data)], scale.=FALSE) # All quantitative variables
register <- factor(data[,"Register"])
corpus <- factor(data[,"Corpus"])
subcorpus <- factor(data[,"Subcorpus"])
summary(register)
summary(corpus)
summary(subcorpus)
summary(pca)
colours <- suf_palette(name = "london", n = 6, type = "continuous")
colours2 <- suf_palette(name = "classic", n = 5, type = "continuous")
colours <- c(colours, colours2[c(2:4)]) # Nine colours range
col6 <- colours[c(6,5,4,7,9,2)] # Good order for PCA
scales::show_col(col6)
col6 <- c("#F9B921", "#A18A33", "#722672", "#BD241E", "#267226", "#15274D")
names(col6) <- c("Textbook Conversation", "Textbook Fiction", "Textbook Informative", "Spoken BNC2014 Ref.", "Youth Fiction Ref.", "Info Teens Ref.")
shapes6 <- c(rep("cube", 3),rep("sphere", 3))
names(shapes6) <- c("Textbook Conversation", "Textbook Fiction", "Textbook Informative", "Spoken BNC2014 Ref.", "Youth Fiction Ref.", "Info Teens Ref.")
pca3d(pca, group = subcorpus,
components = 1:3,
#components = 4:6,
show.plane=FALSE,
col = col6,
shape = shapes6,
radius = 0.7,
legend = "right")
library(pca3d)
pca3d(pca, group = subcorpus,
components = 1:3,
#components = 4:6,
show.plane=FALSE,
col = col6,
shape = shapes6,
radius = 0.7,
legend = "right")
pca3d(pca, group = subcorpus,
components = 1:3,
#components = 4:6,
show.plane=FALSE,
col = col6,
shape = shapes6,
radius = 0.7,
legend = "right")
pca3d(pca, group = subcorpus,
components = 1:3,
#components = 4:6,
show.plane=FALSE,
col = col6,
shape = shapes6,
radius = 0.7,
legend = "right")
snapshotPCA3d(here("plots", "PCA_TxB_3Ref_3Dsnapshot.png"))
col4 <- colours[c(1,3,7,9)]
col4 <- c("#EA7E1E", "#15274D", "#BD241E", "#267226")
names(col4) <- c("Textbook.English", "Informative.Teens", "Spoken.BNC2014", "Youth.Fiction")
shapes4 <- c("cube", rep("sphere", 3))
names(shapes4) <- c("Textbook.English", "Informative.Teens", "Spoken.BNC2014", "Youth.Fiction")
pca3d(pca, group = corpus,
show.plane=FALSE,
components = 1:3,
col = col4,
shape = shapes4,
radius = 0.7,
legend = "right")
data2 <- data %>%
mutate(Source = recode_factor(Corpus, Textbook.English = "Textbook English (TEC)", Informative.Teens = "Reference corpora", Spoken.BNC2014 = "Reference corpora", Youth.Fiction = "Reference corpora")) %>%
mutate(Corpus = fct_relevel(Subcorpus, "Info Teens Ref.", after = 9)) %>%
relocate(Source, .after = "Corpus") %>%
droplevels(.)
colnames(data2)
data2meta <- data2[,1:9]
rownames(data2meta) <- data2meta$Filename
data2meta <- data2meta %>% select(-Filename)
head(data2meta)
rownames(data2) <- data2$Filename
data2num <- as.data.frame(base::t(data2[,10:ncol(data2)]))
data2num[1:5,1:5] # Check data frame format is correct
p <- PCAtools::pca(data2num,
metadata = data2meta,
scale = FALSE)
p$variance[1:6]
sum(p$variance[1:4])
# For three TEC registers
summary(data2$Corpus)
colkey = c(`Spoken BNC2014 Ref.`="#BD241E", `Info Teens Ref.`="#15274D", `Youth Fiction Ref.`="#267226", `Textbook Fiction`="#A18A33", `Textbook Conversation`="#F9B921", `Textbook Informative` = "#722672")
summary(data2$Level)
shapekey = c(A=1, B=2, C=6, D=0, E=5, `Ref.`=4)
#png(here("plots", "PCA_3Ref_pairsplot.png"), width = 25, height= 40, units = "cm", res = 300)
PCAtools::pairsplot(p,
triangle = FALSE,
components = 1:4,
ncol = 2,
nrow = 3,
pointSize = 1,
shape = "Level",
shapekey = shapekey,
lab = NULL, # Otherwise will try to label each data point!
colby = "Corpus",
legendPosition = "none",
margingaps = unit(c(0.2, 0.2, 0.8, 0.2), "cm"),
colkey = colkey)
# These settings (with legendPosition = "top") were used to generate the legend for the scatterplot matrix above:
#png(here("plots", "PCA_3Ref_Biplot_PC1_PC2test.png"), width = 40, height= 25, units = "cm", res = 300)
PCAtools::biplot(p,
x = "PC1",
y = "PC2",
lab = NULL, # Otherwise will try to label each data point!
colby = "Corpus",
pointSize = 1.3,
colkey = colkey,
shape = "Level",
shapekey = shapekey,
xlim = c(min(p$rotated[, "PC1"]), max(p$rotated[, "PC1"])),
ylim = c(min(p$rotated[, "PC2"]), max(p$rotated[, "PC2"])),
showLoadings = FALSE,
ellipse = TRUE,
axisLabSize = 18,
legendPosition = 'right',
legendTitleSize = 18,
legendLabSize = 14,
legendIconSize = 5) +
theme(plot.margin = unit(c(0,0,0,0.2), "cm"))
# Biplots to examine components more carefully
PCAtools::biplot(p,
x = "PC3",
y = "PC4",
lab = NULL, # Otherwise will try to label each data point!
colby = "Corpus",
pointSize = 1.2,
colkey = colkey,
shape = "Level",
shapekey = shapekey,
xlim = c(min(p$rotated[, "PC3"]), max(p$rotated[, "PC3"])),
ylim = c(min(p$rotated[, "PC4"]), max(p$rotated[, "PC4"])),
showLoadings = FALSE,
ellipse = TRUE,
axisLabSize = 18,
legendPosition = 'right',
legendTitleSize = 18,
legendLabSize = 14,
legendIconSize = 5) +
theme(plot.margin = unit(c(0,0,0,0.2), "cm"))
